template st.suite.Suite {

$${

Suite(suiteDefinitions) ::= <<
/* Generated file: mindUnitSuite.c */

#include "CUnit/CUnit.h"

<TestFunctionsPrototypesDeclaration(suiteDefinitions=suiteDefinitions)>

<TestFunctionsDeclaration(suiteDefinitions=suiteDefinitions)>

<TestsInfosDeclaration(suiteDefinitions=suiteDefinitions)>

<SuitesDeclaration(suiteDefinitions=suiteDefinitions)>

>>

SuitesDeclaration(suiteDefinitions)  ::= <<
/* Start declaration of all test suites struct */
CU_SuiteInfo suites [] = {
<suiteDefinitions:SuiteStructDeclaration(suiteDefinition=it); separator="\n">
  CU_SUITE_INFO_NULL
};
/* End declaration of all test suites struct */
>>

SuiteStructDeclaration(suiteDefinition) ::= <<
  { "<suiteDefinition.description>", <if (suiteDefinition.initFunc)><suiteDefinition.initFunc><else>NULL<endif>, <if (suiteDefinition.cleanupFunc)><suiteDefinition.cleanupFunc><else>NULL<endif>, <suiteDefinition.testInfo.structName> },
>>

TestsInfosDeclaration(suiteDefinitions) ::= <<
<suiteDefinitions:TestInfosDeclarationsFromSuite(suiteDefinition=it); separator="\n\n">
>>

TestInfosDeclarationsFromSuite(suiteDefinition) ::= <<
<TestInfosDeclaration(testInfo=suiteDefinition.testInfo)>
>>

TestInfosDeclaration(testInfo) ::= <<
/* Start declaration of simple test suite */
static CU_TestInfo <testInfo.structName> [] = {
  <testInfo.testCases:TestInfoStructDeclaration(testCase=it); separator="\n">
  CU_TEST_INFO_NULL
};
/* End declaration of simple test suite */
>>

TestInfoStructDeclaration(testCase) ::= <<
{ "<testCase.name>", <testCase.function> },
>>

// ------------------- Test functions (CALL wrappers) -------------------

TestFunctionsDeclaration(suiteDefinitions) ::= <<
/* Start relay functions declarations  */
<suiteDefinitions:TestSuiteFunctionsDeclaration(suiteDefinition=it); separator="\n">
/* End relay functions declarations  */
>>

TestSuiteFunctionsDeclaration(suiteDefinition) ::= <<
// Suite: <suiteDefinition.description>
<DeclareSuiteInitFunc(suiteDefinition)>
<DeclareSuiteCleanupFunc(suiteDefinition)>
<TestFunctionsDeclaration1(testInfo=suiteDefinition.testInfo, clientItfName=suiteDefinition.clientItf)>

>>

DeclareSuiteInitFunc(suiteDefinition) ::= <<
<if (suiteDefinition.initFunc)>
// Init
int <suiteDefinition.initFunc>() {
  return CALL(<suiteDefinition.clientItf>, <suiteDefinition.initMeth>)();
}
<endif>
>>

DeclareSuiteCleanupFunc(suiteDefinition) ::= <<
<if (suiteDefinition.cleanupFunc)>
// Cleanup
int <suiteDefinition.cleanupFunc>() {
  return CALL(<suiteDefinition.clientItf>, <suiteDefinition.cleanupMeth>)();
}
<endif>
>>

TestFunctionsDeclaration1(testInfo, clientItfName) ::= <<
// Tests
<testInfo.testCases:TestFunctionsDeclaration2(testCase=it, clientItfName=clientItfName); separator="\n">
>>

TestFunctionsDeclaration2(testCase, clientItfName) ::= <<
void <testCase.function>() {
  CALL(<clientItfName>, <testCase.clientMeth>)();
}
>>

// ------------------- Test function PROTOTYPES -------------------

TestFunctionsPrototypesDeclaration(suiteDefinitions) ::= <<
/* Start prototype declarations  */
<suiteDefinitions:TestSuitePrototypesDeclaration(suiteDefinition=it); separator="\n">
/* End prototype declarations  */
>>

TestSuitePrototypesDeclaration(suiteDefinition) ::= <<
// Suite: <suiteDefinition.description>
<DeclareSuiteInitFuncPrototype(suiteDefinition)>
<DeclareSuiteCleanupFuncPrototype(suiteDefinition)>
<TestFunctionsPrototypesDeclaration1(testInfo=suiteDefinition.testInfo)>

>>

DeclareSuiteInitFuncPrototype(suiteDefinition) ::= <<
<if (suiteDefinition.initFunc)>
// Init
int <suiteDefinition.initFunc>(void);
<endif>
>>

DeclareSuiteCleanupFuncPrototype(suiteDefinition) ::= <<
<if (suiteDefinition.cleanupFunc)>
// Cleanup
int <suiteDefinition.cleanupFunc>(void);
<endif>
>>

TestFunctionsPrototypesDeclaration1(testInfo) ::= <<
// Tests
<testInfo.testCases:TestFunctionsPrototypesDeclaration2(testCase=it); separator="\n">
>>

TestFunctionsPrototypesDeclaration2(testCase) ::= <<
void <testCase.function>(void);
>>

}$$

}